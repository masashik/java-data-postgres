load("@contrib_rules_jvm//java:defs.bzl", "java_junit5_test", "JUNIT5_DEPS")
load("@rules_spring//springboot:springboot.bzl", "springboot")

springboot(
    name = "java_data_postgres_boot3",
    java_library = ":java_data_postgres_lib",
    boot_app_class = "com.example.accessingdatamysql.AccessingDataMysqlApplication",
    # Boot 3 launcher class:
    boot_launcher_class = "org.springframework.boot.loader.launch.JarLauncher",
    deps = [
        "@maven//:org_springframework_boot_spring_boot_loader",
    ],
)


java_plugin(
    name = "lombok_plugin",
    processor_class = "lombok.launch.AnnotationProcessorHider$AnnotationProcessor",
    deps = ["@maven//:org_projectlombok_lombok"],
    visibility = ["//visibility:public"],
)

java_library(
    name = "java_data_postgres_lib",
    srcs = glob(["src/main/java/**/*.java"]),
    resources = glob(["src/main/resources/**"]),
    resource_strip_prefix = "java-data-postgres/src/main/resources",
    deps = [
        "@maven//:com_mysql_mysql_connector_j",
        "@maven//:org_postgresql_postgresql",
        "@maven//:org_projectlombok_lombok",
        "@maven//:org_springframework_boot_spring_boot_starter_actuator",
        "@maven//:org_springframework_boot_spring_boot_starter_data_jpa",
        "@maven//:org_springframework_boot_spring_boot_starter_hateoas",
        "@maven//:org_springframework_boot_spring_boot_starter_web",
        "@maven//:com_fasterxml_jackson_core_jackson_annotations",
        "@maven//:jakarta_persistence_jakarta_persistence_api",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:org_springframework_boot_spring_boot",
        "@maven//:org_springframework_boot_spring_boot_autoconfigure",
        "@maven//:org_springframework_data_spring_data_commons",
        "@maven//:org_springframework_hateoas_spring_hateoas",
        "@maven//:org_springframework_spring_beans",
        "@maven//:org_springframework_spring_context",
        "@maven//:org_springframework_spring_web",
        "@maven//:org_junit_jupiter_junit_jupiter_api",
    ],
    plugins = [":lombok_plugin"],
    javacopts = ["-parameters"],
    visibility = ["//visibility:public"],
)

java_binary(
    name = "java_data_postgres_app",
    main_class = "com.example.accessingdatamysql.AccessingDataMysqlApplication",
    runtime_deps = [":java_data_postgres_lib"],
)

#java_test(
#    name = "java_data_postgres_tests",
#    srcs = glob(["src/test/java/**/*.java"]),
#    test_class = "com.example.accessingdatamysql.AccessingDataMysqlApplicationTests",
#    deps = [
#        ":java_data_postgres_lib",
#        "@maven//:org_junit_jupiter_junit_jupiter",
#        "@maven//:org_junit_jupiter_junit_jupiter_api",
#        "@maven//:org_springframework_spring_context",
#        "@maven//:org_testcontainers_testcontainers",
#        "@maven//:org_testcontainers_mysql",
#        "@maven//:org_testcontainers_junit_jupiter",
#        "@maven//:org_springframework_boot_spring_boot_test",
#        "@maven//:org_springframework_boot_spring_boot_test_autoconfigure",
#        "@maven//:org_springframework_boot_spring_boot_testcontainers",
#        "@maven//:org_mockito_mockito_core",
#        "@maven//:org_mockito_mockito_junit_jupiter",
#    ],
#)

load("@contrib_rules_jvm//java:defs.bzl", "java_junit5_test", "JUNIT5_DEPS")

java_junit5_test(
    name = "java_data_postgres_tests",
    srcs = glob(["src/test/java/**/*.java"]),
    test_class = "com.example.accessingdatamysql.AccessingDataMysqlApplicationTests",
    runtime_deps = JUNIT5_DEPS,
    deps = [
        ":java_data_postgres_lib",
        "@maven//:org_springframework_spring_context",
        "@maven//:org_springframework_boot_spring_boot_test",
        "@maven//:org_springframework_boot_spring_boot_testcontainers",
        "@maven//:org_testcontainers_testcontainers",
        "@maven//:org_testcontainers_mysql",
        "@maven//:org_testcontainers_junit_jupiter",
        "@maven//:org_mockito_mockito_core",
        "@maven//:org_mockito_mockito_junit_jupiter",
        "@maven//:org_junit_jupiter_junit_jupiter_api",
    ],
)
